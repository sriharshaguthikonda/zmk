/*
 * this is the RIGHT side
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 * &kp K_MENU         -doesnt work!
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&left_encoder {
    status = "okay";
};

/*
&led_strip {
    chain-length = <35>;
};
 */

#define DEFAULT     0
#define FUNCTION    1
#define MEDIA        2
#define NAVIGATION   3



#define NONE 0

#define MO_CAPS(layer) &mo_caps layer layer   // Macro to apply momentary-caps-on-hold to a specific layer



&mt {
    tapping-term-ms = <100>;
};


&sl {
    release-after-ms = <2000>;
};

&lt {
    quick_tap_ms = <300>;
};

/ {
    /*        macros {
         *             win_H: win_H{
             *                label = "win_H";
             *                 compatible = "zmk,behavior-macro";
             *                    #binding-cells = <0>;
             *                 bindings
             *                   = <&macro_press &kp LGUI>
             *                     , <&macro_tap &kp H>
             *                      , <&macro_release &kp LGUI>
             *             ;
         *       };
     *   };
     */

    behaviors {

        mo_caps: behavior_mo_caps {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_caps";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
        //&mo_caps 3 1  to use this function will momentorily go to 3rd layer and tap to toggle to 1st layer

        tdb: brackets {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_FORWARD";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&mt  RIGHT_BRACKET LEFT_BRACKET>,
                       <&kp BACKSLASH>;
        };


        tdr: tap_dance_rewind {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_REWIND";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp C_REWIND>,
                       <&kp C_PREVIOUS>,
                       <&kp C_PREVIOUS>;
        };

        WinH: Windows_H{
            compatible = "zmk,behavior-tap-dance";
            label = "WinH";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp F>,
                       <&kp F>,
                       <&kp LG(H)>;
        };
        // use it like this "&WinH"



        /*         Stalt: Spc_to_alt_tab{
             *              compatible = "zmk,behavior-mod-morph";
             *             label = "SPACETOALT";
             *              #binding-cells = <0>;
             *              bindings = <&kp SPACE>, <&kp LALT>;
             *         mods = <(MOD_RSFT)>;
             *                keep-mods = <(MOD_LSFT)>;
         *          };
         */
    };



    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ----------------------------------------------
            // |  TAB  |  Q   |  W   |  E   |  R   |  T   |
            // | SHIFT |  A   |  S   |  D   |  F   |  G   |
            // | CTRL  |  Z   |  X   |  C   |  V   |  B   |
            // |ADJUST | LCTL | LALT | LGUI | LOWR |
            bindings = <
            &kp N6                      &kp N7              &kp N8              &kp N9          &kp N0                  &kp BSPC
            &kp Y                       &kp U               &kp I               &kp O           &kp P                   &tdb
            &kp H                       &kp J               &kp K               &kp L           &kp SEMI                &mt ENTER SQT
            &kp B                       &kp N               &kp M               &kp COMMA       &kp DOT                 &mt RSHIFT SLASH
            &tog NAVIGATION             &sl FUNCTION        &sl MEDIA           &kp RALT        &kp RET                 &kp SPACE
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Function_layer {
            // -------------------------------------------------------------------------------------------
            // |  ESC  |  1   |  2   |  3   |  4   |  5   |
            // |  F1  |  F2  |  F3  |  F4  |  F5  |  F6  |
            // |   ~  |  !   |  @   |  #   |  $   |  %   |
            // |BOOTLD|BOOTLD|BOOTLD|BOOTLD|BOOTLD|
            bindings = <

            &kp F6                 &kp F7               &kp F8             &kp F9            &kp F10               &kp F11
            &kp F18                &kp F19              &kp F20            &kp F21           &kp F22               &kp F23
            &bootloader            &kp LEFT_ARROW       &kp DOWN_ARROW     &kp UP_ARROW      &kp RIGHT_ARROW       &rgb_ug RGB_TOG
            &rgb_ug RGB_BRI        &rgb_ug RGB_HUI      &rgb_ug RGB_SAI    &rgb_ug RGB_EFF   &rgb_ug RGB_SAI       &rgb_ug RGB_SPI
            &rgb_ug RGB_BRD        &sl FUNCTION         &trans             &rgb_ug RGB_EFR   &rgb_ug RGB_SAD       &rgb_ug RGB_SPD
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Media_layer {
            // -------------------------------------------------------------------------------------------
            // |  ESC  |  1   |  2   |  3   |  4   |  5   |
            // |  F1  |  F2  |  F3  |  F4  |  F5  |  F6  |
            // |   ~  |  !   |  @   |  #   |  $   |  %   |
            // |BOOTLD|BOOTLD|BOOTLD|BOOTLD|BOOTLD|
            bindings = <
            &kp GRAVE         &kp N1                &kp N2                   &kp N3              &kp N4                 &kp N5
            &kp C_PIP         &tdr                  &kp C_PREVIOUS           &kp C_PLAY_PAUSE    &kp C_NEXT             &tdb
            &trans            &trans                &kp C_VOLUME_DOWN        &kp C_PAUSE         &kp C_VOLUME_UP        &trans
            &kp F1            &kp K_VOLUME_DOWN2    &kp C_VOLUME_DOWN        &kp C_VOLUME_UP     &kp K_VOLUME_UP2       &kp C_ALT_AUDIO_INC
            &trans            &sl FUNCTION          &trans                   &trans              &trans                 &none
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Nav_layer {
            // -------------------------------------------------------------------------------------------
            // |  ESC  |  1   |  2   |  3   |  4   |  5   |
            // |  F1  |  F2  |  F3  |  F4  |  F5  |  F6  |
            // |   ~  |  !   |  @   |  #   |  $   |  %   |
            // |BOOTLD|BOOTLD|BOOTLD|BOOTLD|BOOTLD|
            bindings = <
            &kp BSPC                &kp INSERT          &kp HOME            &kp PAGE_UP      &kp PSCRN          &trans
            &kp BACKSLASH           &kp DELETE          &kp END             &kp PAGE_DOWN    &trans             &sl FUNCTION
            &kp ENTER               &trans              &kp UP              &trans             &trans           &trans
            &kp LSHIFT              &kp LEFT            &kp DOWN            &kp RIGHT        &kp C              &kp V
            &tog NAVIGATION         &sl FUNCTION        &trans              &sl MEDIA        &kp RET            &sys_reset
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

    };
};